/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'DataPayloadMsg'
 * message type.
 */

public class DataPayloadMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 40;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 10;

    /** Create a new DataPayloadMsg of size 40. */
    public DataPayloadMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new DataPayloadMsg of the given data_length. */
    public DataPayloadMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataPayloadMsg with the given data_length
     * and base offset.
     */
    public DataPayloadMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataPayloadMsg using the given byte array
     * as backing store.
     */
    public DataPayloadMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataPayloadMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public DataPayloadMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataPayloadMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public DataPayloadMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataPayloadMsg embedded in the given message
     * at the given base offset.
     */
    public DataPayloadMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new DataPayloadMsg embedded in the given message
     * at the given base offset and length.
     */
    public DataPayloadMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <DataPayloadMsg> \n";
      try {
        s += "  [hdr.src_chan_num=0x"+Long.toHexString(get_hdr_src_chan_num())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hdr.dst_chan_num=0x"+Long.toHexString(get_hdr_dst_chan_num())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hdr.seqno=0x"+Long.toHexString(get_hdr_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hdr.cmd=0x"+Long.toHexString(get_hdr_cmd())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hdr.chksum=0x"+Long.toHexString(get_hdr_chksum())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [dhdr.tlen=0x"+Long.toHexString(get_dhdr_tlen())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data=";
        for (int i = 0; i < 32; i++) {
          s += "0x"+Long.toHexString(getElement_data(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hdr.src_chan_num
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hdr.src_chan_num' is signed (false).
     */
    public static boolean isSigned_hdr_src_chan_num() {
        return false;
    }

    /**
     * Return whether the field 'hdr.src_chan_num' is an array (false).
     */
    public static boolean isArray_hdr_src_chan_num() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hdr.src_chan_num'
     */
    public static int offset_hdr_src_chan_num() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hdr.src_chan_num'
     */
    public static int offsetBits_hdr_src_chan_num() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'hdr.src_chan_num'
     */
    public short get_hdr_src_chan_num() {
        return (short)getUIntBEElement(offsetBits_hdr_src_chan_num(), 8);
    }

    /**
     * Set the value of the field 'hdr.src_chan_num'
     */
    public void set_hdr_src_chan_num(short value) {
        setUIntBEElement(offsetBits_hdr_src_chan_num(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'hdr.src_chan_num'
     */
    public static int size_hdr_src_chan_num() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hdr.src_chan_num'
     */
    public static int sizeBits_hdr_src_chan_num() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hdr.dst_chan_num
    //   Field type: short, unsigned
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hdr.dst_chan_num' is signed (false).
     */
    public static boolean isSigned_hdr_dst_chan_num() {
        return false;
    }

    /**
     * Return whether the field 'hdr.dst_chan_num' is an array (false).
     */
    public static boolean isArray_hdr_dst_chan_num() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hdr.dst_chan_num'
     */
    public static int offset_hdr_dst_chan_num() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hdr.dst_chan_num'
     */
    public static int offsetBits_hdr_dst_chan_num() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'hdr.dst_chan_num'
     */
    public short get_hdr_dst_chan_num() {
        return (short)getUIntBEElement(offsetBits_hdr_dst_chan_num(), 8);
    }

    /**
     * Set the value of the field 'hdr.dst_chan_num'
     */
    public void set_hdr_dst_chan_num(short value) {
        setUIntBEElement(offsetBits_hdr_dst_chan_num(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'hdr.dst_chan_num'
     */
    public static int size_hdr_dst_chan_num() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hdr.dst_chan_num'
     */
    public static int sizeBits_hdr_dst_chan_num() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hdr.seqno
    //   Field type: short, unsigned
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hdr.seqno' is signed (false).
     */
    public static boolean isSigned_hdr_seqno() {
        return false;
    }

    /**
     * Return whether the field 'hdr.seqno' is an array (false).
     */
    public static boolean isArray_hdr_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hdr.seqno'
     */
    public static int offset_hdr_seqno() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hdr.seqno'
     */
    public static int offsetBits_hdr_seqno() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'hdr.seqno'
     */
    public short get_hdr_seqno() {
        return (short)getUIntBEElement(offsetBits_hdr_seqno(), 8);
    }

    /**
     * Set the value of the field 'hdr.seqno'
     */
    public void set_hdr_seqno(short value) {
        setUIntBEElement(offsetBits_hdr_seqno(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'hdr.seqno'
     */
    public static int size_hdr_seqno() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hdr.seqno'
     */
    public static int sizeBits_hdr_seqno() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hdr.cmd
    //   Field type: short, unsigned
    //   Offset (bits): 24
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hdr.cmd' is signed (false).
     */
    public static boolean isSigned_hdr_cmd() {
        return false;
    }

    /**
     * Return whether the field 'hdr.cmd' is an array (false).
     */
    public static boolean isArray_hdr_cmd() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hdr.cmd'
     */
    public static int offset_hdr_cmd() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hdr.cmd'
     */
    public static int offsetBits_hdr_cmd() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'hdr.cmd'
     */
    public short get_hdr_cmd() {
        return (short)getUIntBEElement(offsetBits_hdr_cmd(), 8);
    }

    /**
     * Set the value of the field 'hdr.cmd'
     */
    public void set_hdr_cmd(short value) {
        setUIntBEElement(offsetBits_hdr_cmd(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'hdr.cmd'
     */
    public static int size_hdr_cmd() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hdr.cmd'
     */
    public static int sizeBits_hdr_cmd() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hdr.chksum
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hdr.chksum' is signed (false).
     */
    public static boolean isSigned_hdr_chksum() {
        return false;
    }

    /**
     * Return whether the field 'hdr.chksum' is an array (false).
     */
    public static boolean isArray_hdr_chksum() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hdr.chksum'
     */
    public static int offset_hdr_chksum() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hdr.chksum'
     */
    public static int offsetBits_hdr_chksum() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'hdr.chksum'
     */
    public int get_hdr_chksum() {
        return (int)getUIntBEElement(offsetBits_hdr_chksum(), 16);
    }

    /**
     * Set the value of the field 'hdr.chksum'
     */
    public void set_hdr_chksum(int value) {
        setUIntBEElement(offsetBits_hdr_chksum(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'hdr.chksum'
     */
    public static int size_hdr_chksum() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hdr.chksum'
     */
    public static int sizeBits_hdr_chksum() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dhdr.tlen
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dhdr.tlen' is signed (false).
     */
    public static boolean isSigned_dhdr_tlen() {
        return false;
    }

    /**
     * Return whether the field 'dhdr.tlen' is an array (false).
     */
    public static boolean isArray_dhdr_tlen() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dhdr.tlen'
     */
    public static int offset_dhdr_tlen() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dhdr.tlen'
     */
    public static int offsetBits_dhdr_tlen() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'dhdr.tlen'
     */
    public int get_dhdr_tlen() {
        return (int)getUIntBEElement(offsetBits_dhdr_tlen(), 16);
    }

    /**
     * Set the value of the field 'dhdr.tlen'
     */
    public void set_dhdr_tlen(int value) {
        setUIntBEElement(offsetBits_dhdr_tlen(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'dhdr.tlen'
     */
    public static int size_dhdr_tlen() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dhdr.tlen'
     */
    public static int sizeBits_dhdr_tlen() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data
    //   Field type: short[], unsigned
    //   Offset (bits): 64
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data' is signed (false).
     */
    public static boolean isSigned_data() {
        return false;
    }

    /**
     * Return whether the field 'data' is an array (true).
     */
    public static boolean isArray_data() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'data'
     */
    public static int offset_data(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 32) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data'
     */
    public static int offsetBits_data(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 32) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'data' as a short[]
     */
    public short[] get_data() {
        short[] tmp = new short[32];
        for (int index0 = 0; index0 < numElements_data(0); index0++) {
            tmp[index0] = getElement_data(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'data' from the given short[]
     */
    public void set_data(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_data(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'data'
     */
    public short getElement_data(int index1) {
        return (short)getUIntBEElement(offsetBits_data(index1), 8);
    }

    /**
     * Set an element of the array 'data'
     */
    public void setElement_data(int index1, short value) {
        setUIntBEElement(offsetBits_data(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'data'
     */
    public static int totalSize_data() {
        return (256 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'data'
     */
    public static int totalSizeBits_data() {
        return 256;
    }

    /**
     * Return the size, in bytes, of each element of the array 'data'
     */
    public static int elementSize_data() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'data'
     */
    public static int elementSizeBits_data() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'data'
     */
    public static int numDimensions_data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'data'
     */
    public static int numElements_data() {
        return 32;
    }

    /**
     * Return the number of elements in the array 'data'
     * for the given dimension.
     */
    public static int numElements_data(int dimension) {
      int array_dims[] = { 32,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'data' with a String
     */
    public void setString_data(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_data(i, (short)s.charAt(i));
         }
         setElement_data(i, (short)0); //null terminate
    }

    /**
     * Read the array 'data' as a String
     */
    public String getString_data() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,32)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_data(i) == (char)0) break;
             carr[i] = (char)getElement_data(i);
         }
         return new String(carr,0,i);
    }

}
